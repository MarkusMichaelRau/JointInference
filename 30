import numpy as np
import pyccl as ccl
from scipy.stats import rv_histogram
from pyccl.background import comoving_radial_distance as chi_a
from scipy.interpolate import InterpolatedUnivariateSpline as inter
#pyccl.background.comoving_radial_distance
#use globally mpc as unit


class LimberIntegration(object):
    def __init__(self, cosmo, comdist_grid, pchi):
        
        self.cosmo = cosmo 
        self.H0 = cosmo['h'] * 100
        self.om_mat = cosmo['Omega_c'] + cosmo['Omega_b']
        
        self.comdist_grid = comdist_grid #units of Mpc
        self.pchi = pchi # this is rv_histogram object from scipy stats
        agrid = np.linspace(0.05, 1.0, num=100)
        chi_interpo = np.array([chi_a(el) for el in agrid])
        self.interpolator_a_chi = inter(chi_interpo, agrid, ext=2)
         

    def a_chi(self, chi): 
        return self.interpolator_a_chi(chi)

    def evaluate_lens_kernel(self, chi): 
        result_kern = np.zeros((len(chi), ))
        for idx, el in enumerate(chi): 
            result_kern[idx] = self.pchi.expect(lambda chi_s: (el * (chi_s - el))/chi_s, lb=el)
        
        return result_kern

    def get_cl(self, ell): 
        




        

